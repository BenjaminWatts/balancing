"""
Auto-generated Pydantic models from BMRS OpenAPI specification.

This file is automatically generated. Do not edit manually.
"""

from __future__ import annotations  # Enable forward references

from typing import Any, Dict, List, Optional, Union
from datetime import date, datetime
from pydantic import BaseModel, Field, ConfigDict


class LegacyRemitDetailBody(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataItem: Optional[str] = None
    list: Optional[LegacyRemitDetailList] = None


class LegacyRemitDetailItem(BaseModel):
    model_config = ConfigDict(extra='allow')

    messageId: Optional[str] = None
    sequenceId: Optional[int] = None
    messageHeading: Optional[str] = None
    eventType: Optional[str] = None
    publishDateTimeString: Optional[str] = None
    participantMarketParticipantId: Optional[str] = None
    assetId: Optional[str] = None
    assetEicCode: Optional[str] = None
    assetType: Optional[str] = None
    affectedUnit: Optional[str] = None
    affectedArea: Optional[str] = None
    assetFuelType: Optional[str] = None
    assetNormalCapacity: Optional[float] = None
    availableCapacity: Optional[float] = None
    unavailableCapacity: Optional[float] = None
    eventStartString: Optional[str] = None
    eventEndString: Optional[str] = None
    cause: Optional[str] = None
    eventStatus: Optional[str] = None
    relatedInformation: Optional[str] = None
    activeFlag: Optional[str] = None
    messageType: Optional[str] = None
    unavailabilityType: Optional[str] = None
    acerCode: Optional[str] = None
    biddingZone: Optional[str] = None
    outageProfile: Optional[LegacyRemitOutageProfile] = None
    revisionNumber: Optional[int] = None


class LegacyRemitDetailList(BaseModel):
    model_config = ConfigDict(extra='allow')

    item: Optional[LegacyRemitDetailItem] = None


class LegacyRemitDetailMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    httpCode: Optional[int] = None
    errorType: Optional[str] = None
    description: Optional[str] = None
    queryString: Optional[str] = None


class LegacyRemitDetailResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    metadata: Optional[LegacyRemitDetailMetadata] = None
    body: Optional[LegacyRemitDetailBody] = None


class LegacyRemitListItem(BaseModel):
    model_config = ConfigDict(extra='allow')

    messageId: Optional[str] = None
    sequenceId: Optional[int] = None
    messageHeading: Optional[str] = None
    eventType: Optional[str] = None
    publishDateTimeString: Optional[str] = None
    participantMarketParticipantId: Optional[str] = None
    assetId: Optional[str] = None
    assetEicCode: Optional[str] = None
    assetType: Optional[str] = None
    affectedUnit: Optional[str] = None
    affectedArea: Optional[str] = None
    assetFuelType: Optional[str] = None
    assetNormalCapacity: Optional[float] = None
    assetNormalCapacitySpecified: Optional[bool] = None
    availableCapacity: Optional[float] = None
    availableCapacitySpecified: Optional[bool] = None
    eventStartString: Optional[str] = None
    eventEndString: Optional[str] = None
    durationUncertainty: Optional[str] = None
    cause: Optional[str] = None
    eventStatus: Optional[str] = None
    relatedInformation: Optional[str] = None
    activeFlag: Optional[str] = None
    revisionNumber: Optional[int] = None
    messageType: Optional[str] = None
    unavailabilityType: Optional[str] = None
    unavailableCapacity: Optional[float] = None
    unavailableCapacitySpecified: Optional[bool] = None


class LegacyRemitListMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    httpCode: Optional[int] = None
    errorType: Optional[str] = None
    description: Optional[str] = None
    cappingApplied: Optional[str] = None
    cappingLimit: Optional[int] = None
    queryString: Optional[str] = None


class LegacyRemitListResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    legacyRemitListMetadata: Optional[LegacyRemitListMetadata] = None
    legacyRemitListResponseBody: Optional[LegacyRemitListResponseBody] = None


class LegacyRemitListResponseBody(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataItem: Optional[str] = None
    legacyRemitResponseList: Optional[LegacyRemitResponseList] = None


class LegacyRemitOutageProfile(BaseModel):
    model_config = ConfigDict(extra='allow')

    segments: Optional[List[LegacyRemitOutageProfileSegment]] = None


class LegacyRemitOutageProfileSegment(BaseModel):
    model_config = ConfigDict(extra='allow')

    segmentStartString: Optional[str] = None
    segmentEndString: Optional[str] = None
    segmentCapacity: Optional[int] = None


class LegacyRemitResponseList(BaseModel):
    model_config = ConfigDict(extra='allow')

    item: Optional[List[LegacyRemitListItem]] = None


class ApiResponseSourceMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    datasets: Optional[List[str]] = Field(default=None, examples=[['DATASET']])


class BalancingServicesVolume(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    bmUnitApplicableBalancingServicesVolume: Optional[float] = Field(default=None, examples=[123.45])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])
    time: Optional[datetime] = Field(default=None, examples=["2022-07-25T09:34:00Z"])


class BidOfferAcceptancesResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    settlementPeriodFrom: Optional[int] = Field(default=None, examples=[29])
    settlementPeriodTo: Optional[int] = Field(default=None, examples=[32])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:34:00Z"])
    timeTo: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:37:00Z"])
    levelFrom: Optional[int] = Field(default=None, examples=[5])
    levelTo: Optional[int] = Field(default=None, examples=[46])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])
    acceptanceNumber: Optional[int] = Field(default=None, examples=[1234567])
    acceptanceTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:30:00Z"])
    deemedBoFlag: Optional[bool] = Field(default=None, examples=[True])
    soFlag: Optional[bool] = None
    storFlag: Optional[bool] = Field(default=None, examples=[True])
    rrFlag: Optional[bool] = None


class BidOfferResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    timeTo: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    levelFrom: Optional[int] = Field(default=None, examples=[5])
    levelTo: Optional[int] = Field(default=None, examples=[46])
    bid: Optional[float] = Field(default=None, examples=[668.67])
    offer: Optional[float] = Field(default=None, examples=[-71.5])
    pairId: Optional[int] = Field(default=None, examples=[1])


class CreditDefaultNoticeResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    participantId: Optional[str] = Field(default=None, examples=["INVE"])
    participantName: Optional[str] = Field(default=None, examples=["AMPowerUK Ltd"])
    creditDefaultLevel: Optional[int] = Field(default=None, examples=[2])
    enteredDefaultSettlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    enteredDefaultSettlementPeriod: Optional[int] = Field(default=None, examples=[3])
    clearedDefaultSettlementDate: Optional[date] = Field(default=None, examples=["2022-07-02"])
    clearedDefaultSettlementPeriod: Optional[int] = Field(default=None, examples=[29])
    clearedDefaultText: Optional[str] = Field(default=None, examples=["Credit Cover Percentage greater than or equal to 90% of Credit Limit (Level 2 Default)"])


class BalancingServicesVolumeData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["QAS"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    bmUnitApplicableBalancingServicesVolume: Optional[float] = Field(default=None, examples=[123.45])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class BidOfferAcceptanceLevelDatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["BOALF"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-25"])
    settlementPeriodFrom: Optional[int] = Field(default=None, examples=[29])
    settlementPeriodTo: Optional[int] = Field(default=None, examples=[32])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:34:00Z"])
    timeTo: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:37:00Z"])
    levelFrom: Optional[int] = Field(default=None, examples=[5])
    levelTo: Optional[int] = Field(default=None, examples=[46])
    acceptanceNumber: Optional[int] = Field(default=None, examples=[1234567])
    acceptanceTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:37:00Z"])
    deemedBoFlag: Optional[bool] = None
    soFlag: Optional[bool] = None
    amendmentFlag: Optional[str] = Field(default=None, examples=["ORI"])
    storFlag: Optional[bool] = None
    rrFlag: Optional[bool] = None
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class BidOfferDatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["BOD"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    levelFrom: Optional[int] = Field(default=None, examples=[5])
    timeTo: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    levelTo: Optional[int] = Field(default=None, examples=[46])
    pairId: Optional[int] = Field(default=None, examples=[1])
    offer: Optional[float] = Field(default=None, examples=[-71.5])
    bid: Optional[float] = Field(default=None, examples=[668.67])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class CreditDefaultNoticeDatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["CDN"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2022-09-20T00:00Z"])
    bscPartyId: Optional[str] = Field(default=None, examples=["INVE"])
    creditDefaultLevel: Optional[int] = Field(default=None, examples=[1])
    enteredDefaultSettlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    enteredDefaultSettlementPeriod: Optional[int] = Field(default=None, examples=[3])
    clearedDefaultSettlementDate: Optional[date] = Field(default=None, examples=["2022-07-02"])
    clearedDefaultSettlementPeriod: Optional[int] = Field(default=None, examples=[29])
    clearedDefaultText: Optional[str] = Field(default=None, examples=["Credit Cover Percentage greater than or equal to 90% of Credit Limit (Level 2 Default)"])


class DisaggregatedBalancingServicesAdjustmentData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["DISBSAD"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[29])
    id: Optional[int] = Field(default=None, examples=[1])
    cost: Optional[float] = Field(default=None, examples=[1850.9])
    volume: Optional[float] = Field(default=None, examples=[5])
    soFlag: Optional[bool] = None
    storFlag: Optional[bool] = None
    partyId: Optional[str] = Field(default=None, examples=["ElectroRoute Energy Trading Limited"])
    assetId: Optional[str] = Field(default=None, examples=["ING-ELTR1"])
    isTendered: Optional[bool] = None
    service: Optional[str] = Field(default=None, examples=["Energy"])


class MarketIndexDatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["MID"])
    startTime: Optional[datetime] = Field(default=None, examples=["2022-09-26T13:00:00Z"])
    dataProvider: Optional[str] = Field(default=None, examples=["N2EXMIDP"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-09-26"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    price: Optional[float] = Field(default=None, examples=[678.12])
    volume: Optional[float] = Field(default=None, examples=[678.123])


class NetBalancingServicesAdjustmentData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["NETBSAD"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[29])
    netBuyPriceCostAdjustmentEnergy: Optional[float] = None
    netBuyPriceVolumeAdjustmentEnergy: Optional[float] = None
    netBuyPriceVolumeAdjustmentSystem: Optional[float] = None
    buyPricePriceAdjustment: Optional[float] = None
    netSellPriceCostAdjustmentEnergy: Optional[float] = None
    netSellPriceVolumeAdjustmentEnergy: Optional[float] = None
    netSellPriceVolumeAdjustmentSystem: Optional[float] = None
    sellPricePriceAdjustment: Optional[float] = None


class DisaggregatedBalancingServicesAdjustmentDetailsResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[29])
    startTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:00:00Z"])
    id: Optional[int] = Field(default=None, examples=[1])
    cost: Optional[float] = Field(default=None, examples=[1850.9])
    volume: Optional[float] = Field(default=None, examples=[5])
    price: Optional[float] = Field(default=None, examples=[370.18])
    soFlag: Optional[bool] = None
    storFlag: Optional[bool] = None
    partyId: Optional[str] = Field(default=None, examples=["ElectroRoute Energy Trading Limited"])
    assetId: Optional[str] = Field(default=None, examples=["ING-ELTR1"])
    isTendered: Optional[bool] = None
    service: Optional[str] = Field(default=None, examples=["Energy"])


class DisaggregatedBalancingServicesAdjustmentSummaryResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2022-09-26"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[27])
    startTime: Optional[datetime] = Field(default=None, examples=["2022-09-26T13:00:00Z"])
    buyActionCount: Optional[int] = Field(default=None, examples=[2])
    sellActionCount: Optional[int] = Field(default=None, examples=[2])
    buyPriceMinimum: Optional[float] = Field(default=None, examples=[10.23])
    buyPriceMaximum: Optional[float] = Field(default=None, examples=[30.45])
    buyPriceAverage: Optional[float] = Field(default=None, examples=[20.34])
    sellPriceMinimum: Optional[float] = Field(default=None, examples=[1.23])
    sellPriceMaximum: Optional[float] = Field(default=None, examples=[3.45])
    sellPriceAverage: Optional[float] = Field(default=None, examples=[2.34])
    buyVolumeTotal: Optional[float] = Field(default=None, examples=[40.68])
    sellVolumeTotal: Optional[float] = Field(default=None, examples=[4.68])
    netVolume: Optional[float] = Field(default=None, examples=[36])


class DeliveryPeriodMaxData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["MDP"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    time: Optional[datetime] = Field(default=None, examples=["2022-07-25T09:34:00Z"])
    periodMax: Optional[int] = Field(default=None, examples=[360])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class DeliveryPeriodMinData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["MZT"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    time: Optional[datetime] = Field(default=None, examples=["2022-07-25T09:34:00Z"])
    periodMin: Optional[int] = Field(default=None, examples=[360])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class DeliveryVolumeMaxData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["MDV"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    time: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    volumeMax: Optional[int] = Field(default=None, examples=[31])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class NoticeData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["NTB"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    time: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    notice: Optional[int] = Field(default=None, examples=[13])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class StablePortageLimitData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["SEL"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    time: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    level: Optional[int] = Field(default=None, examples=[5])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class DynamicData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["SEL"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    time: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    value: Optional[int] = Field(default=None, examples=[5])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])


class RateData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["RURE"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    time: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    rate1: Optional[float] = Field(default=None, examples=[0.4])
    elbow2: Optional[float] = Field(default=None, examples=[5])
    rate2: Optional[float] = Field(default=None, examples=[300.2])
    elbow3: Optional[float] = None
    rate3: Optional[float] = None
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class MarketIndexResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    startTime: Optional[datetime] = Field(default=None, examples=["2022-09-26T13:00:00Z"])
    dataProvider: Optional[str] = Field(default=None, examples=["N2EXMIDP"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-09-26"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    price: Optional[float] = Field(default=None, examples=[678.12])
    volume: Optional[float] = Field(default=None, examples=[678.123])


class NetBalancingServicesAdjustmentResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    startTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:00:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[29])
    netBuyPriceCostAdjustmentEnergy: Optional[float] = None
    netBuyPriceVolumeAdjustmentEnergy: Optional[float] = None
    netBuyPriceVolumeAdjustmentSystem: Optional[float] = None
    buyPricePriceAdjustment: Optional[float] = None
    netSellPriceCostAdjustmentEnergy: Optional[float] = None
    netSellPriceVolumeAdjustmentEnergy: Optional[float] = None
    netSellPriceVolumeAdjustmentSystem: Optional[float] = None
    sellPricePriceAdjustment: Optional[float] = None


class NonBmStorResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:34:00Z"])
    startTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:00:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[29])
    generation: Optional[int] = None


class DeliveryLimitMaxData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["MILS"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    timeTo: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    levelFrom: Optional[int] = Field(default=None, examples=[5])
    levelTo: Optional[int] = Field(default=None, examples=[46])
    notificationTime: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    notificationSequence: Optional[int] = Field(default=None, examples=[93210322])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class PhysicalNotificationData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["PN"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    timeTo: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    levelFrom: Optional[int] = Field(default=None, examples=[5])
    levelTo: Optional[int] = Field(default=None, examples=[46])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class PhysicalData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["PN"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    timeTo: Optional[datetime] = Field(default=None, examples=["2022-07-01T13:34:00Z"])
    levelFrom: Optional[int] = Field(default=None, examples=[5])
    levelTo: Optional[int] = Field(default=None, examples=[46])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])


class AcceptanceVolumeResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    createdDateTime: Optional[datetime] = Field(default=None, examples=["2023-02-28T15:31:12Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-03-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[2])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-03-01T00:30:00Z"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])
    bmUnitType: Optional[str] = Field(default=None, examples=["T"])
    leadPartyName: Optional[str] = Field(default=None, examples=["Aberdeen Offshore Wind Farm"])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    acceptanceId: Optional[int] = Field(default=None, examples=[76110])
    acceptanceDuration: Optional[str] = Field(default=None, examples=["L"])
    totalVolumeAccepted: Optional[float] = Field(default=None, examples=[-75.725])
    pairVolumes: Optional[DerivedDataBidOfferPairs] = None


class DerivedDataBidOfferPairs(BaseModel):
    model_config = ConfigDict(extra='allow')

    negative1: Optional[float] = None
    positive1: Optional[float] = Field(default=None, examples=[23062.377])
    negative2: Optional[float] = None
    positive2: Optional[float] = Field(default=None, examples=[5017.6255])
    negative3: Optional[float] = None
    positive3: Optional[float] = None
    negative4: Optional[float] = None
    positive4: Optional[float] = None
    negative5: Optional[float] = None
    positive5: Optional[float] = None
    negative6: Optional[float] = None
    positive6: Optional[float] = None


class HistoricAcceptanceResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2023-11-15"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[1])
    bmUnit: Optional[str] = Field(default=None, examples=["2__AFLEX003"])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["AG-AFLX03"])
    acceptanceNumber: Optional[int] = Field(default=None, examples=[22])
    acceptanceTime: Optional[datetime] = Field(default=None, examples=["2023-11-15T00:00:00Z"])
    bidPrice: Optional[float] = Field(default=None, examples=[-44.95])
    offerPrice: Optional[float] = Field(default=None, examples=[449.95])
    bidOfferPairId: Optional[int] = Field(default=None, examples=[1])


class IndicativeCashflowResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2023-03-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[1])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-03-01T00:00:00Z"])
    createdDateTime: Optional[datetime] = Field(default=None, examples=["2023-09-17T09:03:18.74Z"])
    bmUnit: Optional[str] = Field(default=None, examples=["2__AFLEX003"])
    bmUnitType: Optional[str] = Field(default=None, examples=["S"])
    leadPartyName: Optional[str] = Field(default=None, examples=["Flexitricity Limited"])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["AG-AFLX03"])
    bidOfferPairCashflows: Optional[DerivedDataBidOfferPairs] = None
    totalCashflow: Optional[float] = Field(default=None, examples=[28080.002])


class IndicativeVolumeResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    createdDateTime: Optional[datetime] = Field(default=None, examples=["2023-02-28T15:31:12Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-03-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[2])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-03-01T00:30:00Z"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_ABRBO-1"])
    bmUnitType: Optional[str] = Field(default=None, examples=["T"])
    leadPartyName: Optional[str] = Field(default=None, examples=["Aberdeen Offshore Wind Farm"])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["ABRBO-1"])
    dataType: Optional[str] = Field(default=None, examples=["Original"])
    totalVolumeAccepted: Optional[float] = Field(default=None, examples=[-75.725])
    pairVolumes: Optional[DerivedDataBidOfferPairs] = None


class MarketDepthResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2023-11-15"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[1])
    indicatedImbalance: Optional[int] = Field(default=None, examples=[419])
    offerVolume: Optional[float] = Field(default=None, examples=[51708.5])
    bidVolume: Optional[float] = Field(default=None, examples=[-60941.5])
    totalAcceptedOfferVolume: Optional[float] = Field(default=None, examples=[376.35834])
    totalAcceptedBidVolume: Optional[float] = Field(default=None, examples=[-164.875])
    pricedAcceptedOffersVolume: Optional[float] = Field(default=None, examples=[573.8417])
    pricedAcceptedBidsVolume: Optional[float] = Field(default=None, examples=[-42.375])


class SettlementMessageResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2023-09-18"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[2])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-09-18T00:30:00Z"])
    messageReceivedDateTime: Optional[datetime] = Field(default=None, examples=["2023-09-17T15:31:12Z"])
    messageSeverity: Optional[str] = Field(default=None, examples=["Error"])
    messageTypeCode: Optional[str] = Field(default=None, examples=["ERR-BM-001"])
    messageType: Optional[str] = Field(default=None, examples=["FPN"])
    messageText: Optional[str] = Field(default=None, examples=["No FPN files have been received."])


class SettlementStackResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2021-12-05"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[14])
    startTime: Optional[datetime] = Field(default=None, examples=["2021-12-05T08:00:00Z"])
    createdDateTime: Optional[datetime] = Field(default=None, examples=["2023-09-17T09:03:18.74Z"])
    sequenceNumber: Optional[int] = Field(default=None, examples=[1])
    id: Optional[str] = Field(default=None, examples=["T_STAY-2"])
    acceptanceId: Optional[int] = Field(default=None, examples=[102999])
    bidOfferPairId: Optional[int] = Field(default=None, examples=[1])
    cadlFlag: Optional[bool] = None
    soFlag: Optional[bool] = None
    storProviderFlag: Optional[bool] = None
    repricedIndicator: Optional[bool] = None
    reserveScarcityPrice: Optional[float] = None
    originalPrice: Optional[float] = Field(default=None, examples=[202])
    volume: Optional[float] = Field(default=None, examples=[52.5])
    dmatAdjustedVolume: Optional[float] = Field(default=None, examples=[52.5])
    arbitrageAdjustedVolume: Optional[float] = Field(default=None, examples=[52.5])
    nivAdjustedVolume: Optional[float] = Field(default=None, examples=[52.5])
    parAdjustedVolume: Optional[float] = None
    finalPrice: Optional[float] = None
    transmissionLossMultiplier: Optional[float] = Field(default=None, examples=[0.9933898])
    tlmAdjustedVolume: Optional[float] = None
    tlmAdjustedCost: Optional[float] = None


class SettlementSummaryPrice(BaseModel):
    model_config = ConfigDict(extra='allow')

    cost: Optional[float] = Field(default=None, examples=[-53.66])
    volume: Optional[float] = Field(default=None, examples=[-0.994])
    value: Optional[float] = Field(default=None, examples=[54])


class SettlementSummaryResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    createdDateTime: Optional[datetime] = Field(default=None, examples=["2023-03-01T00:44:58Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-03-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[1])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-03-01T00:00:00Z"])
    adjuster: Optional[float] = None
    priceDerivationCode: Optional[str] = Field(default=None, examples=["N"])
    systemSellPrice: Optional[float] = Field(default=None, examples=[54])
    systemBuyPrice: Optional[float] = Field(default=None, examples=[54])
    mainPrice: Optional[SettlementSummaryPrice] = None
    marketPrice: Optional[SettlementSummaryPrice] = None


class SystemPriceResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2023-09-18"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[2])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-09-18T00:30:00Z"])
    createdDateTime: Optional[datetime] = Field(default=None, examples=["2023-09-17T15:31:12Z"])
    systemSellPrice: Optional[float] = Field(default=None, examples=[215])
    systemBuyPrice: Optional[float] = Field(default=None, examples=[215])
    bsadDefaulted: Optional[bool] = None
    priceDerivationCode: Optional[str] = Field(default=None, examples=["P"])
    reserveScarcityPrice: Optional[float] = None
    netImbalanceVolume: Optional[float] = Field(default=None, examples=[291.9136])
    sellPriceAdjustment: Optional[float] = None
    buyPriceAdjustment: Optional[float] = None
    replacementPrice: Optional[float] = None
    replacementPriceReferenceVolume: Optional[float] = None
    totalAcceptedOfferVolume: Optional[float] = Field(default=None, examples=[790.6547])
    totalAcceptedBidVolume: Optional[float] = Field(default=None, examples=[-738.74115])
    totalAdjustmentSellVolume: Optional[float] = None
    totalAdjustmentBuyVolume: Optional[float] = Field(default=None, examples=[240])
    totalSystemTaggedAcceptedOfferVolume: Optional[float] = Field(default=None, examples=[789.6547])
    totalSystemTaggedAcceptedBidVolume: Optional[float] = Field(default=None, examples=[-738.74115])
    totalSystemTaggedAdjustmentSellVolume: Optional[float] = None
    totalSystemTaggedAdjustmentBuyVolume: Optional[float] = Field(default=None, examples=[240])


class CreditDefaultNoticeResponse_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[CreditDefaultNoticeResponse]] = None


class BalancingServicesVolumeData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[BalancingServicesVolumeData]] = None


class BidOfferAcceptanceLevelDatasetResponse_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[BidOfferAcceptanceLevelDatasetResponse]] = None


class BidOfferDatasetResponse_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[BidOfferDatasetResponse]] = None


class CreditDefaultNoticeDatasetResponse_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[CreditDefaultNoticeDatasetResponse]] = None


class DisaggregatedBalancingServicesAdjustmentData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DisaggregatedBalancingServicesAdjustmentData]] = None


class MarketIndexDatasetResponse_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[MarketIndexDatasetResponse]] = None


class NetBalancingServicesAdjustmentData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[NetBalancingServicesAdjustmentData]] = None


class DeliveryPeriodMaxData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DeliveryPeriodMaxData]] = None


class DeliveryPeriodMinData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DeliveryPeriodMinData]] = None


class DeliveryVolumeMaxData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DeliveryVolumeMaxData]] = None


class NoticeData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[NoticeData]] = None


class StablePortageLimitData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[StablePortageLimitData]] = None


class RateData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[RateData]] = None


class DeliveryLimitMaxData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DeliveryLimitMaxData]] = None


class PhysicalNotificationData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[PhysicalNotificationData]] = None


class DemandForecastNationalDaily_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastNationalDaily]] = None


class DemandForecastNationalDayAhead_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastNationalDayAhead]] = None


class DemandForecastNationalWeekly_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastNationalWeekly]] = None


class DemandForecastTransmissionDaily_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastTransmissionDaily]] = None


class DemandForecastTransmissionDayAhead_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastTransmissionDayAhead]] = None


class DemandForecastTransmissionWeekly_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastTransmissionWeekly]] = None


class DemandOutturnNational_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandOutturnNational]] = None


class DemandOutturnTransmission_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandOutturnTransmission]] = None


class IndodDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndodDatasetRow]] = None


class ForecastMarginDaily_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ForecastMarginDaily]] = None


class ForecastMarginWeekly_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ForecastMarginWeekly]] = None


class ForecastSurplusDaily_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ForecastSurplusDaily]] = None


class ForecastSurplusWeekly_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ForecastSurplusWeekly]] = None


class AugmentedOutturnData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AugmentedOutturnData]] = None


class AvailabilityByBmUnitDaily_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AvailabilityByBmUnitDaily]] = None


class AvailabilityByBmUnitWeekly_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AvailabilityByBmUnitWeekly]] = None


class AvailabilityByFuelTypeDaily_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AvailabilityByFuelTypeDaily]] = None


class AvailabilityByFuelTypeWeekly_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AvailabilityByFuelTypeWeekly]] = None


class AvailabilityDaily_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AvailabilityDaily]] = None


class AvailabilityWeekly_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AvailabilityWeekly]] = None


class NonBmStorData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[NonBmStorData]] = None


class WindGenerationForecast_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[WindGenerationForecast]] = None


class IndicatedDemand_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndicatedDemand]] = None


class IndicatedGeneration_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndicatedGeneration]] = None


class IndicatedImbalance_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndicatedImbalance]] = None


class IndicatedMargin_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndicatedMargin]] = None


class DemandControlInstructionDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandControlInstructionDatasetRow]] = None


class LossOfLoadProbabilityDeratedMarginData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[LossOfLoadProbabilityDeratedMarginData]] = None


class SoSoPricesDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[SoSoPricesDatasetRow]] = None


class SystemFrequency_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[SystemFrequency]] = None


class SystemWarningsData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[SystemWarningsData]] = None


class TemperatureData_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[TemperatureData]] = None


class TudmDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[TudmDatasetRow]] = None


class DatasetMetadataLatestRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DatasetMetadataLatestRow]] = None


class RestorationZoneDemandForecastDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[RestorationZoneDemandForecastDatasetRow]] = None


class RestorationZoneDemandRestoredDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[RestorationZoneDemandRestoredDatasetRow]] = None


class AbucDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AbucDatasetRow]] = None


class ActualAggregatedGenerationPerTypeDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ActualAggregatedGenerationPerTypeDatasetRow]] = None


class ActualGenerationOutputPerGenerationUnitDatasetResponse_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ActualGenerationOutputPerGenerationUnitDatasetResponse]] = None


class ActualGenerationWindSolarDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ActualGenerationWindSolarDatasetRow]] = None


class ActualTotalLoadPerBiddingZoneDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ActualTotalLoadPerBiddingZoneDatasetRow]] = None


class AobeDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AobeDatasetRow]] = None


class BebDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[BebDatasetRow]] = None


class CbsDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[CbsDatasetRow]] = None


class CostsOfCongestionManagementDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[CostsOfCongestionManagementDatasetRow]] = None


class DayAheadAggregatedGenerationDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DayAheadAggregatedGenerationDatasetRow]] = None


class DayAheadGenerationForWindAndSolarDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DayAheadGenerationForWindAndSolarDatasetRow]] = None


class DayAheadTotalLoadPerBiddingZoneDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DayAheadTotalLoadPerBiddingZoneDatasetRow]] = None


class FeibDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[FeibDatasetRow]] = None


class IgcaDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IgcaDatasetRow]] = None


class IgcpuDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IgcpuDatasetRow]] = None


class MonthAheadTotalLoadPerBiddingZoneDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[MonthAheadTotalLoadPerBiddingZoneDatasetRow]] = None


class PbcDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[PbcDatasetRow]] = None


class PpbrDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[PpbrDatasetRow]] = None


class WeekAheadTotalLoadPerBiddingZoneDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[WeekAheadTotalLoadPerBiddingZoneDatasetRow]] = None


class YearAheadForecastMarginDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[YearAheadForecastMarginDatasetRow]] = None


class YearAheadTotalLoadPerBiddingZoneDatasetRow_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[YearAheadTotalLoadPerBiddingZoneDatasetRow]] = None


class RemitMessage_DatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[RemitMessage]] = None


class DemandForecastNationalDaily(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    forecastDate: Optional[date] = None
    demand: Optional[int] = None


class DemandForecastNationalDayAhead(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    demand: Optional[int] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None


class DemandForecastNationalWeekly(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    year: Optional[int] = None
    week: Optional[int] = None
    demand: Optional[int] = None


class DemandForecastTransmissionDaily(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    forecastDate: Optional[date] = None
    demand: Optional[int] = None


class DemandForecastTransmissionDayAhead(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    demand: Optional[int] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None


class DemandForecastTransmissionWeekly(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    year: Optional[int] = None
    week: Optional[int] = None
    demand: Optional[int] = None


class DemandForecastDaily(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    transmissionSystemDemand: Optional[int] = None
    nationalDemand: Optional[int] = None
    forecastDate: Optional[date] = None


class DemandForecastDayAhead(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    transmissionSystemDemand: Optional[int] = None
    nationalDemand: Optional[int] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None


class DemandForecastPeak(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None
    transmissionSystemDemand: Optional[int] = None


class DemandForecastWeekly(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    transmissionSystemDemand: Optional[int] = None
    nationalDemand: Optional[int] = None
    forecastWeek: Optional[int] = None
    forecastYear: Optional[int] = None
    weekStartDate: Optional[date] = None


class DemandOutturnNational(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    demand: Optional[int] = None


class DemandOutturnTransmission(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    demand: Optional[int] = None


class IndodDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["INDOD"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-08-26T23:15:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-08-26"])
    demand: Optional[int] = Field(default=None, examples=[494802])


class DemandOutturn(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    initialDemandOutturn: Optional[int] = None
    initialTransmissionSystemDemandOutturn: Optional[int] = None


class DemandOutturnPeak(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    initialTransmissionSystemDemandOutturn: Optional[int] = None


class IndicativeDemandPeak(BaseModel):
    model_config = ConfigDict(extra='allow')

    settlementDate: Optional[date] = Field(default=None, examples=["2021-10-01"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    halfHourEndTime: Optional[datetime] = Field(default=None, examples=["2021-10-01T01:00:00Z"])
    demand: Optional[float] = Field(default=None, examples=[36256])
    settlementRunType: Optional[str] = Field(default=None, examples=["II"])


class IndodRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2023-08-26T23:15:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-08-26"])
    demand: Optional[int] = Field(default=None, examples=[494802])


class RollingSystemDemand(BaseModel):
    model_config = ConfigDict(extra='allow')

    recordType: Optional[str] = None
    startTime: Optional[datetime] = None
    demand: Optional[int] = None


class ForecastMarginDaily(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    forecastDate: Optional[date] = None
    margin: Optional[int] = None


class ForecastMarginWeekly(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    week: Optional[int] = None
    year: Optional[int] = None
    margin: Optional[int] = None


class ForecastMarginDaily_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    margin: Optional[int] = None
    forecastDate: Optional[date] = None


class ForecastMarginWeekly_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    margin: Optional[int] = None
    week: Optional[int] = None
    year: Optional[int] = None
    weekStartDate: Optional[date] = None


class ForecastSurplusDaily(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    forecastDate: Optional[date] = None
    surplus: Optional[int] = None


class ForecastSurplusWeekly(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    week: Optional[int] = None
    year: Optional[int] = None
    surplus: Optional[int] = None


class ForecastSurplusDaily_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    surplus: Optional[int] = None
    forecastDate: Optional[date] = None


class ForecastSurplusWeekly_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    surplus: Optional[int] = None
    week: Optional[int] = None
    year: Optional[int] = None
    weekStartDate: Optional[date] = None


class AvailabilityDaily(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = Field(default=None, examples=["2024-06-07T15:00:00Z"])
    fuelType: Optional[str] = Field(default=None, examples=["CCGT"])
    ngcBmUnit: Optional[str] = Field(default=None, examples=["CARR-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_CARR-1"])
    outputUsable: Optional[int] = Field(default=None, examples=[418])
    forecastDate: Optional[date] = Field(default=None, examples=["2024-06-07"])


class AvailabilityWeekly(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = Field(default=None, examples=["2024-06-07T15:00:00Z"])
    fuelType: Optional[str] = Field(default=None, examples=["CCGT"])
    ngcBmUnit: Optional[str] = Field(default=None, examples=["CARR-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_CARR-1"])
    outputUsable: Optional[int] = Field(default=None, examples=[418])
    year: Optional[int] = Field(default=None, examples=[2024])
    calendarWeekNumber: Optional[int] = Field(default=None, examples=[23])


class AugmentedOutturnData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["FUELINST"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:00:00Z"])
    startTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:00:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[3])
    fuelType: Optional[str] = Field(default=None, examples=["BIOMASS"])
    generation: Optional[int] = None


class AvailabilityByBmUnitDaily(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    fuelType: Optional[str] = Field(default=None, examples=["WIND"])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["WTMSO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_WTMSO-1"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2022-08-15T11:00:00Z"])
    forecastDate: Optional[date] = Field(default=None, examples=["2022-08-17"])
    outputUsable: Optional[int] = Field(default=None, examples=[84])


class AvailabilityByBmUnitWeekly(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    fuelType: Optional[str] = Field(default=None, examples=["CCGT"])
    nationalGridBmUnit: Optional[str] = Field(default=None, examples=["CARR-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_CARR-1"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2022-08-10T15:00:00Z"])
    week: Optional[int] = Field(default=None, examples=[34])
    year: Optional[int] = Field(default=None, examples=[2022])
    outputUsable: Optional[int] = Field(default=None, examples=[442])


class AvailabilityByFuelTypeDaily(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    fuelType: Optional[str] = None
    publishTime: Optional[datetime] = None
    systemZone: Optional[str] = None
    forecastDate: Optional[date] = None
    forecastDateTimezone: Optional[str] = None
    outputUsable: Optional[int] = None
    biddingZone: Optional[str] = None
    interconnectorName: Optional[str] = None
    interconnector: Optional[bool] = None


class AvailabilityByFuelTypeWeekly(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    fuelType: Optional[str] = None
    publishTime: Optional[datetime] = None
    systemZone: Optional[str] = None
    calendarWeekNumber: Optional[int] = None
    year: Optional[int] = None
    outputUsable: Optional[int] = None
    biddingZone: Optional[str] = None
    interconnectorName: Optional[str] = None
    interconnector: Optional[bool] = None


class AvailabilityDaily_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    systemZone: Optional[str] = None
    forecastDate: Optional[date] = None
    forecastDateTimezone: Optional[str] = None
    outputUsable: Optional[int] = None


class AvailabilityWeekly_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    systemZone: Optional[str] = None
    calendarWeekNumber: Optional[int] = None
    year: Optional[int] = None
    outputUsable: Optional[int] = None


class NonBmStorData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["NONBM"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:34:00Z"])
    startTime: Optional[datetime] = Field(default=None, examples=["2022-06-25T13:00:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-06-25"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[29])
    generation: Optional[int] = None


class WindGenerationForecast(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    generation: Optional[int] = None


class GenerationByFuelType(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    fuelType: Optional[str] = None
    currentUsage: Optional[int] = None
    currentPercentage: Optional[float] = None
    halfHourUsage: Optional[int] = None
    halfHourPercentage: Optional[float] = None
    twentyFourHourUsage: Optional[int] = None
    twentyFourHourPercentage: Optional[float] = None


class HalfHourlyInterconnectorOutturn(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementDateTimezone: Optional[str] = None
    settlementPeriod: Optional[int] = None
    interconnectorName: Optional[str] = None
    generation: Optional[int] = None


class OutturnGenerationBySettlementPeriod(BaseModel):
    model_config = ConfigDict(extra='allow')

    startTime: Optional[datetime] = None
    settlementPeriod: Optional[int] = None
    data: Optional[List[OutturnGenerationValue]] = None


class OutturnGenerationValue(BaseModel):
    model_config = ConfigDict(extra='allow')

    fuelType: Optional[str] = None
    generation: Optional[int] = None


class WindGenerationForecast_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    generation: Optional[int] = None


class IndicatedDemand(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    demand: Optional[int] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None


class IndicatedGeneration(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    generation: Optional[int] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None


class IndicatedImbalance(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    imbalance: Optional[int] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None


class IndicatedMargin(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    margin: Optional[int] = None
    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None


class IndicatedForecast(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None
    indicatedGeneration: Optional[int] = None
    indicatedDemand: Optional[int] = None
    indicatedMargin: Optional[int] = None
    indicatedImbalance: Optional[int] = None


class DemandControlInstructionDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["DCI"])
    mRID: Optional[str] = Field(default=None, examples=["DCI_202104300853_00000030"])
    revisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2021-04-30T08:53:39Z"])
    publishingPeriodCommencingTime: Optional[datetime] = Field(default=None, examples=["2021-04-30T08:53:39Z"])
    affectedDso: Optional[str] = Field(default=None, examples=["SP(D)"])
    demandControlId: Optional[str] = Field(default=None, examples=["00135"])
    instructionSequence: Optional[int] = Field(default=None, examples=[1])
    demandControlEventFlag: Optional[str] = Field(default=None, examples=["I"])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2021-04-30T12:45:00Z"])
    timeTo: Optional[datetime] = Field(default=None, examples=["2021-04-30T13:09:00Z"])
    volume: Optional[float] = Field(default=None, examples=[68])
    systemManagementActionFlag: Optional[str] = Field(default=None, examples=["T"])
    amendmentFlag: Optional[str] = Field(default=None, examples=["ORI"])


class LossOfLoadProbabilityDeratedMarginData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["LOLPDRM"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-01-31 17:39:15Z"])
    publishingPeriodCommencingTime: Optional[datetime] = Field(default=None, examples=["2023-01-31 17:30Z"])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-01-31 18:30Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-01-31"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[38])
    lossOfLoadProbability: Optional[float] = None
    deratedMargin: Optional[float] = Field(default=None, examples=[12570.207])


class SoSoPricesDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["SOSO"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2022-09-20T00:00Z"])
    senderIdentification: Optional[str] = Field(default=None, examples=["10X1001A1001A515"])
    receiverIdentification: Optional[str] = Field(default=None, examples=["10X1001A1001A59Q"])
    contractIdentification: Optional[str] = Field(default=None, examples=["EG_20210928_1100_1"])
    resourceProvider: Optional[str] = Field(default=None, examples=["EG_20210928_1100_1"])
    tradeDirection: Optional[str] = Field(default=None, examples=["A02"])
    tradeQuantity: Optional[float] = Field(default=None, examples=[25])
    tradePrice: Optional[float] = Field(default=None, examples=[30.4])
    traderUnit: Optional[str] = Field(default=None, examples=["EWIC_EG"])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-09-25 18:30"])
    endTime: Optional[datetime] = Field(default=None, examples=["2023-09-20 18:30"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-01-31"])


class SystemFrequency(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    measurementTime: Optional[datetime] = None
    frequency: Optional[float] = None


class SystemWarningsData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["SYSWARN"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2022-09-20T00:00Z"])
    warningType: Optional[str] = Field(default=None, examples=["SO-SO TRADES"])
    warningText: Optional[str] = Field(default=None, examples=["NATIONAL GRID NOTIFICATION of excess energy prices used for settlement outside of BALIT for SO to SO Transactions"])


class TemperatureData(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    measurementDate: Optional[date] = None
    publishTime: Optional[datetime] = None
    temperature: Optional[float] = None


class TudmDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["TUDM"])
    serialNumber: Optional[str] = Field(default=None, examples=["000000980321"])
    fileCreationTime: Optional[datetime] = Field(default=None, examples=["2023-10-19T07:01:07.000"])
    tradingUnitType: Optional[str] = Field(default=None, examples=["Base"])
    tradingUnitName: Optional[str] = Field(default=None, examples=["DEFAULT__A"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-30"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[5])
    settlementRunType: Optional[str] = Field(default=None, examples=["RF"])
    startTime: Optional[datetime] = Field(default=None, examples=["2022-07-30T10:30:00Z"])
    deliveryMode: Optional[str] = Field(default=None, examples=["Offtaking"])
    importVolume: Optional[float] = Field(default=None, examples=[209.95])
    exportVolume: Optional[float] = Field(default=None, examples=[-1372.384])
    netVolume: Optional[float] = Field(default=None, examples=[-1162.434])


class DemandControlInstructionData(BaseModel):
    model_config = ConfigDict(extra='allow')

    mRID: Optional[str] = Field(default=None, examples=["DCI_202104300853_00000030"])
    revisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2021-04-30T08:53:39Z"])
    publishingPeriodCommencingTime: Optional[datetime] = Field(default=None, examples=["2021-04-30T08:53:39Z"])
    affectedDso: Optional[str] = Field(default=None, examples=["SP(D)"])
    demandControlId: Optional[str] = Field(default=None, examples=["00135"])
    instructionSequence: Optional[int] = Field(default=None, examples=[1])
    demandControlEventFlag: Optional[str] = Field(default=None, examples=["I"])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2021-04-30T12:45:00Z"])
    timeTo: Optional[datetime] = Field(default=None, examples=["2021-04-30T13:09:00Z"])
    volume: Optional[float] = Field(default=None, examples=[68])
    systemManagementActionFlag: Optional[str] = Field(default=None, examples=["T"])
    amendmentFlag: Optional[str] = Field(default=None, examples=["ORI"])


class LossOfLoadProbabilityDeratedMarginResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2023-01-31 17:36"])
    publishingPeriodCommencingTime: Optional[datetime] = Field(default=None, examples=["2023-01-31 17:30"])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-01-31 18:30"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-01-31"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[38])
    forecastHorizon: Optional[float] = Field(default=None, examples=[1])
    lossOfLoadProbability: Optional[float] = None
    deratedMargin: Optional[float] = Field(default=None, examples=[12570.207])


class SoSoPrices(BaseModel):
    model_config = ConfigDict(extra='allow')

    contractIdentification: Optional[str] = Field(default=None, examples=["EG_20210928_1100_1"])
    tradeDirection: Optional[str] = Field(default=None, examples=["A02"])
    tradeQuantity: Optional[float] = Field(default=None, examples=[25])
    tradePrice: Optional[float] = Field(default=None, examples=[30.4])
    traderUnit: Optional[str] = Field(default=None, examples=["EWIC_EG"])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-09-25 18:30"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-01-31"])


class SystemFrequency_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    measurementTime: Optional[datetime] = None
    frequency: Optional[float] = None


class SystemWarningsData_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2022-09-20T00:00Z"])
    warningType: Optional[str] = Field(default=None, examples=["IT SYSTEMS OUTAGE"])
    warningText: Optional[str] = Field(default=None, examples=["NATIONAL GRID NOTIFICATION of excess energy prices used for settlement outside of BALIT for SO to SO Transactions"])


class TemperatureData_1(BaseModel):
    model_config = ConfigDict(extra='allow')

    measurementDate: Optional[date] = None
    publishTime: Optional[datetime] = None
    temperature: Optional[float] = None
    temperatureReferenceAverage: Optional[float] = None
    temperatureReferenceHigh: Optional[float] = None
    temperatureReferenceLow: Optional[float] = None


class BmUnitData(BaseModel):
    model_config = ConfigDict(extra='allow')

    nationalGridBmUnit: Optional[str] = None
    elexonBmUnit: Optional[str] = None
    eic: Optional[str] = None
    fuelType: Optional[str] = None
    leadPartyName: Optional[str] = None
    bmUnitType: Optional[str] = None
    fpnFlag: Optional[bool] = None
    bmUnitName: Optional[str] = None
    leadPartyId: Optional[str] = None
    demandCapacity: Optional[str] = None
    generationCapacity: Optional[str] = None
    productionOrConsumptionFlag: Optional[str] = None
    transmissionLossFactor: Optional[str] = None
    workingDayCreditAssessmentImportCapability: Optional[str] = None
    nonWorkingDayCreditAssessmentImportCapability: Optional[str] = None
    workingDayCreditAssessmentExportCapability: Optional[str] = None
    nonWorkingDayCreditAssessmentExportCapability: Optional[str] = None
    creditQualifyingStatus: Optional[bool] = None
    demandInProductionFlag: Optional[bool] = None
    gspGroupId: Optional[str] = None
    gspGroupName: Optional[str] = None
    interconnectorId: Optional[str] = None


class DatasetMetadataLatestRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = None
    lastUpdated: Optional[datetime] = None


class InterconnectorData(BaseModel):
    model_config = ConfigDict(extra='allow')

    interconnectorId: Optional[str] = None
    interconnectorName: Optional[str] = None
    interconnectorBiddingZone: Optional[str] = None


class BalancingServicesVolume_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[BalancingServicesVolume]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class BidOfferAcceptancesResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[BidOfferAcceptancesResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class BidOfferResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[BidOfferResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DisaggregatedBalancingServicesAdjustmentDetailsResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DisaggregatedBalancingServicesAdjustmentDetailsResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DisaggregatedBalancingServicesAdjustmentSummaryResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DisaggregatedBalancingServicesAdjustmentSummaryResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DynamicData_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DynamicData]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class RateData_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[RateData]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class MarketIndexResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[MarketIndexResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class NetBalancingServicesAdjustmentResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[NetBalancingServicesAdjustmentResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class NonBmStorResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[NonBmStorResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class PhysicalData_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[PhysicalData]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class AcceptanceVolumeResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AcceptanceVolumeResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class HistoricAcceptanceResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[HistoricAcceptanceResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class IndicativeCashflowResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndicativeCashflowResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class IndicativeVolumeResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndicativeVolumeResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class MarketDepthResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[MarketDepthResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class SettlementMessageResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[SettlementMessageResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class SettlementStackResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[SettlementStackResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class SystemPriceResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[SystemPriceResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DemandForecastDaily_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastDaily]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DemandForecastDayAhead_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastDayAhead]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DemandForecastPeak_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastPeak]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DemandForecastWeekly_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandForecastWeekly]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DemandOutturn_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandOutturn]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DemandOutturnPeak_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandOutturnPeak]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class IndicativeDemandPeak_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndicativeDemandPeak]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class IndodRow_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndodRow]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class RollingSystemDemand_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[RollingSystemDemand]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class ForecastMarginDaily_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ForecastMarginDaily]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class ForecastMarginWeekly_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ForecastMarginWeekly]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class ForecastSurplusDaily_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ForecastSurplusDaily]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class ForecastSurplusWeekly_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ForecastSurplusWeekly]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class AvailabilityDaily_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AvailabilityDaily]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class AvailabilityWeekly_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[AvailabilityWeekly]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class HalfHourlyInterconnectorOutturn_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[HalfHourlyInterconnectorOutturn]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class WindGenerationForecast_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[WindGenerationForecast]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class IndicatedForecast_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[IndicatedForecast]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DemandControlInstructionData_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DemandControlInstructionData]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class LossOfLoadProbabilityDeratedMarginResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[LossOfLoadProbabilityDeratedMarginResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class SoSoPrices_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[SoSoPrices]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class SystemFrequency_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[SystemFrequency]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class SystemWarningsData_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[SystemWarningsData]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class TemperatureData_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[TemperatureData]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class RestorationZoneDemandRestoredDatasetRow_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[RestorationZoneDemandRestoredDatasetRow]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class TotalExemptSupplyVolumeResponse_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[TotalExemptSupplyVolumeResponse]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class ActualGenerationBySettlementPeriod_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ActualGenerationBySettlementPeriod]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class ActualGenerationWindSolar_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ActualGenerationWindSolar]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class ActualTotalLoadPerBiddingZone_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[ActualTotalLoadPerBiddingZone]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DayAheadAggregatedGeneration_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DayAheadAggregatedGeneration]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DayAheadGenerationForWindAndSolar_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DayAheadGenerationForWindAndSolar]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class DayAheadTotalLoadPerBiddingZone_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[DayAheadTotalLoadPerBiddingZone]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class RemitMessageIdentifierWithUrl_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[RemitMessageIdentifierWithUrl]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class RemitMessageWithId_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[RemitMessageWithId]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class WeekAheadTotalLoadPerBiddingZone_ResponseWithMetadata(BaseModel):
    model_config = ConfigDict(extra='allow')

    data: Optional[List[WeekAheadTotalLoadPerBiddingZone]] = None
    metadata: Optional[ApiResponseSourceMetadata] = None


class RestorationZoneDemandForecastDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["RZDF"])
    submissionDateTime: Optional[datetime] = Field(default=None, examples=["2025-01-01T07:01:07"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2025-01-01T00:00:10"])
    settlementDate: Optional[date] = Field(default=None, examples=["2025-01-02"])
    region: Optional[str] = Field(default=None, examples=["North Scotland"])
    gspGroupId: Optional[str] = Field(default=None, examples=["_A"])
    forecastDemand60: Optional[int] = Field(default=None, examples=[1234])
    forecastDemand100: Optional[int] = Field(default=None, examples=[12345])


class RestorationZoneDemandRestoredDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["RZDR"])
    submissionDateTime: Optional[datetime] = Field(default=None, examples=["2025-01-01T07:01:07"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2025-01-01T00:00:10"])
    region: Optional[str] = Field(default=None, examples=["North Scotland"])
    gspGroupId: Optional[str] = Field(default=None, examples=["_A"])
    restoredDemand: Optional[int] = Field(default=None, examples=[1234])


class TotalExemptSupplyVolumeResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    creationTime: Optional[datetime] = Field(default=None, examples=["2025-01-16T15:31:12Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2025-01-16"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[5])
    settlementRunType: Optional[str] = Field(default=None, examples=["R1"])
    totalExemptSupplyVolume: Optional[float] = Field(default=None, examples=[505.3])


class ActualGenerationBySettlementPeriod(BaseModel):
    model_config = ConfigDict(extra='allow')

    startTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 06:30:00Z"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[16])
    data: Optional[List[ActualGenerationValue]] = None


class ActualGenerationValue(BaseModel):
    model_config = ConfigDict(extra='allow')

    businessType: Optional[str] = Field(default=None, examples=["Solar generation"])
    psrType: Optional[str] = Field(default=None, examples=["Solar"])
    quantity: Optional[float] = Field(default=None, examples=[1829])


class ActualGenerationWindSolar(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    businessType: Optional[str] = Field(default=None, examples=["Solar generation"])
    psrType: Optional[str] = Field(default=None, examples=["Solar"])
    quantity: Optional[float] = Field(default=None, examples=[1829])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 06:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-12"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[16])


class ActualTotalLoadPerBiddingZone(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2023-06-29 17:25:09Z"])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-06-29 15:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-06-29"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[40])
    quantity: Optional[float] = Field(default=None, examples=[1000])


class AgptSummaryData(BaseModel):
    model_config = ConfigDict(extra='allow')

    psrType: Optional[str] = None
    halfHourUsage: Optional[float] = None
    halfHourPercentage: Optional[float] = None
    twentyFourHourUsage: Optional[float] = None
    twentyFourHourPercentage: Optional[float] = None


class AbucDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["ABUC"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-ABUC-00688983"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-08-22T07:43:04Z"])
    businessType: Optional[str] = Field(default=None, examples=["Replacement reserve"])
    psrType: Optional[str] = Field(default=None, examples=["Generation"])
    marketAgreementType: Optional[str] = Field(default=None, examples=["Daily"])
    flowDirection: Optional[str] = Field(default=None, examples=["Up"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-08-23"])
    quantity: Optional[float] = Field(default=None, examples=[1140])


class ActualAggregatedGenerationPerTypeDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["AGPT"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-AGPT-06426954"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    businessType: Optional[str] = Field(default=None, examples=["Solar generation"])
    psrType: Optional[str] = Field(default=None, examples=["Solar"])
    quantity: Optional[float] = Field(default=None, examples=[1829])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 06:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-07-12"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[16])


class ActualGenerationOutputPerGenerationUnitDatasetResponse(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["B1610"])
    psrType: Optional[str] = Field(default=None, examples=["Generation"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_CNQPS-1"])
    nationalGridBmUnitId: Optional[str] = Field(default=None, examples=["CNQPS-1"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-08-12"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[10])
    halfHourEndTime: Optional[datetime] = Field(default=None, examples=["2022-08-12T04:00:00Z"])
    quantity: Optional[float] = Field(default=None, examples=[116.109])


class ActualGenerationWindSolarDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["AGWS"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-AGWS-20810714"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[2])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    businessType: Optional[str] = Field(default=None, examples=["Solar generation"])
    psrType: Optional[str] = Field(default=None, examples=["Solar"])
    quantity: Optional[float] = Field(default=None, examples=[1829])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 06:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2022-07-12"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[16])


class ActualTotalLoadPerBiddingZoneDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["ATL"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-ATL-06424732"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-06-29 17:25:09Z"])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-06-29 15:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-06-29"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[40])
    quantity: Optional[float] = Field(default=None, examples=[1000])


class AobeDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["AOBE"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-AOBE-00879999"])
    timeSeriesId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-AOBE-36758603"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-10-24T13:09:07Z"])
    flowDirection: Optional[str] = Field(default=None, examples=["Up"])
    quantity: Optional[float] = Field(default=None, examples=[12412])
    secondaryQuantity: Optional[float] = Field(default=None, examples=[45.831])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-09-11T14:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-09-11"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[32])


class BebDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["BEB"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-BEB-00688983"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-08-22T07:43:04Z"])
    bidId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-BEB-TS-36758603"])
    flowDirection: Optional[str] = Field(default=None, examples=["Up"])
    quantity: Optional[float] = Field(default=None, examples=[1140])
    energyPrice: Optional[float] = Field(default=None, examples=[150])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-08-22T07:43:04Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-08-23"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[1])


class CbsDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["CBS"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-CBS-00879999"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-10-24T13:09:07Z"])
    flowDirection: Optional[str] = Field(default=None, examples=["Up"])
    quantity: Optional[float] = Field(default=None, examples=[12412])
    timeFrom: Optional[datetime] = Field(default=None, examples=["2023-09-11T14:30:00Z"])
    timeTo: Optional[datetime] = Field(default=None, examples=["2023-09-11T14:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-09-11"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[32])


class CostsOfCongestionManagementDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["CCM"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-CCM-00688999"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    businessType: Optional[str] = Field(default=None, examples=["Congestion costs"])
    year: Optional[int] = Field(default=None, examples=[2023])
    month: Optional[str] = Field(default=None, examples=["OCT"])
    amount: Optional[float] = Field(default=None, examples=[1.08])


class DayAheadAggregatedGenerationDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["DAG"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-DAG-06244336"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    quantity: Optional[float] = Field(default=None, examples=[1804.5])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 06:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-07-12"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[16])


class DayAheadGenerationForWindAndSolarDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["DGWS"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-DGWSINTRADAY-06043339"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    processType: Optional[str] = Field(default=None, examples=["Intraday process"])
    businessType: Optional[str] = Field(default=None, examples=["Wind generation"])
    psrType: Optional[str] = Field(default=None, examples=["Wind Offshore"])
    quantity: Optional[float] = Field(default=None, examples=[1829])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 06:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-07-12"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[16])


class DayAheadTotalLoadPerBiddingZoneDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["DATL"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-DATL-16244005"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-08-05 12:00:08Z"])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-08-06 23:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-08-07"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[2])
    quantity: Optional[float] = Field(default=None, examples=[18648])


class FeibDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["FEIB"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-FEIB-00687316"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2021-09-21T10:04:24Z"])
    status: Optional[str] = Field(default=None, examples=["Intermediate"])
    year: Optional[int] = Field(default=None, examples=[2021])
    month: Optional[str] = Field(default=None, examples=["JUL"])
    amount: Optional[float] = Field(default=None, examples=[77112420])
    priceDirection: Optional[str] = Field(default=None, examples=["Expenditure"])


class IgcaDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["IGCA"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-IGCA-00687002"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2022-04-21T13:25:52Z"])
    businessType: Optional[str] = Field(default=None, examples=["Installed generation"])
    psrType: Optional[str] = Field(default=None, examples=["Hydro Pumped Storage"])
    year: Optional[int] = Field(default=None, examples=[2022])
    quantity: Optional[float] = Field(default=None, examples=[1928])


class IgcpuDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["IGCPU"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-CONF-00688811"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2022-04-21T13:25:52Z"])
    effectiveFrom: Optional[date] = Field(default=None, examples=["2023-08-07"])
    psrType: Optional[str] = Field(default=None, examples=["Other"])
    registeredResourceEicCode: Optional[str] = Field(default=None, examples=["48WVPI-TRAD-BMUI"])
    registeredResourceName: Optional[str] = Field(default=None, examples=["DBAWO-1"])
    bmUnit: Optional[str] = Field(default=None, examples=["T_DBAWO-1"])
    voltageLimit: Optional[float] = Field(default=None, examples=[2234.1])
    installedCapacity: Optional[float] = Field(default=None, examples=[1928.2])


class MonthAheadTotalLoadPerBiddingZoneDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["MATL"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-WATL-16209423"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-05-25 23:00:10Z"])
    forecastWeekCommencingDate: Optional[date] = Field(default=None, examples=["2023-05-29"])
    forecastYear: Optional[int] = Field(default=None, examples=[2023])
    forecastMonth: Optional[str] = Field(default=None, examples=["JUN"])
    minimumPossible: Optional[float] = Field(default=None, examples=[18034])
    maximumAvailable: Optional[float] = Field(default=None, examples=[35011])


class PbcDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["PBC"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-PBC-00688983"])
    timeSeriesId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-PBC-TS-36758603"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-08-22T07:43:04Z"])
    flowDirection: Optional[str] = Field(default=None, examples=["Up"])
    psrType: Optional[str] = Field(default=None, examples=["Generation"])
    quantity: Optional[float] = Field(default=None, examples=[1140])
    procurementPrice: Optional[float] = Field(default=None, examples=[150])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-08-22T07:43:04Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-08-23"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[1])


class PpbrDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["PPBR"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-PPBR-00688983"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-08-22T07:43:04Z"])
    psrType: Optional[str] = Field(default=None, examples=["Generation"])
    marketAgreementType: Optional[str] = Field(default=None, examples=["Daily"])
    flowDirection: Optional[str] = Field(default=None, examples=["Up"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-08-23"])
    amount: Optional[float] = Field(default=None, examples=[1.2])


class WeekAheadTotalLoadPerBiddingZoneDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["WATL"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-WATL-16209423"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    forecastDate: Optional[date] = Field(default=None, examples=["2023-07-24"])
    forecastWeek: Optional[int] = Field(default=None, examples=[30])
    minimumPossible: Optional[float] = Field(default=None, examples=[18034])
    maximumAvailable: Optional[float] = Field(default=None, examples=[35011])


class YearAheadForecastMarginDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["YAFM"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-YAFM-00687705"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    businessType: Optional[str] = Field(default=None, examples=["Positive forecast margin"])
    year: Optional[int] = Field(default=None, examples=[2023])
    quantity: Optional[float] = Field(default=None, examples=[1.08])


class YearAheadTotalLoadPerBiddingZoneDatasetRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["YATL"])
    documentId: Optional[str] = Field(default=None, examples=["NGET-EMFIP-WATL-16209423"])
    documentRevisionNumber: Optional[int] = Field(default=None, examples=[1])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    forecastYear: Optional[int] = Field(default=None, examples=[2023])
    forecastWeek: Optional[int] = Field(default=None, examples=[30])
    minimumPossible: Optional[float] = Field(default=None, examples=[18034])
    maximumAvailable: Optional[float] = Field(default=None, examples=[35011])


class DayAheadAggregatedGeneration(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    quantity: Optional[float] = Field(default=None, examples=[1804.5])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 06:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-07-12"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[16])


class DayAheadGenerationForWindAndSolar(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2023-06-29T17:25:09Z"])
    processType: Optional[str] = Field(default=None, examples=["Intraday process"])
    businessType: Optional[str] = Field(default=None, examples=["Wind generation"])
    psrType: Optional[str] = Field(default=None, examples=["Wind Offshore"])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-06-29T15:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-06-29"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[40])
    quantity: Optional[float] = Field(default=None, examples=[1000])


class DayAheadTotalLoadPerBiddingZone(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2023-08-05 12:00:08Z"])
    startTime: Optional[datetime] = Field(default=None, examples=["2023-08-06 23:30:00Z"])
    settlementDate: Optional[date] = Field(default=None, examples=["2023-08-07"])
    settlementPeriod: Optional[int] = Field(default=None, examples=[2])
    quantity: Optional[float] = Field(default=None, examples=[18648])


class OutageProfileData(BaseModel):
    model_config = ConfigDict(extra='allow')

    startTime: Optional[datetime] = None
    endTime: Optional[datetime] = None
    capacity: Optional[float] = None


class RemitMessage(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["REMIT"])
    mrid: Optional[str] = Field(default=None, examples=["11XINNOGY------2-NGET-RMT-00084421"])
    revisionNumber: Optional[int] = Field(default=None, examples=[25])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-01-31T17:39:15Z"])
    createdTime: Optional[datetime] = Field(default=None, examples=["2023-01-31T17:39:15Z"])
    messageType: Optional[str] = Field(default=None, examples=["UnavailabilitiesOfElectricityFacilities"])
    messageHeading: Optional[str] = Field(default=None, examples=["Planned Unavailability of Generation Unit"])
    eventType: Optional[str] = Field(default=None, examples=["Production unavailability"])
    unavailabilityType: Optional[str] = Field(default=None, examples=["Planned"])
    participantId: Optional[str] = Field(default=None, examples=["11XINNOGY------2"])
    registrationCode: Optional[str] = Field(default=None, examples=["11XINNOGY------2"])
    assetId: Optional[str] = Field(default=None, examples=["T_DIDCB5"])
    assetType: Optional[str] = Field(default=None, examples=["Production"])
    affectedUnit: Optional[str] = Field(default=None, examples=["DIDCB5"])
    affectedUnitEIC: Optional[str] = Field(default=None, examples=["48W000000DIDCB5C"])
    affectedArea: Optional[str] = Field(default=None, examples=["N"])
    biddingZone: Optional[str] = Field(default=None, examples=["10YGB----------A"])
    fuelType: Optional[str] = Field(default=None, examples=["Fossil Gas"])
    normalCapacity: Optional[float] = Field(default=None, examples=[780])
    availableCapacity: Optional[float] = Field(default=None, examples=[320])
    unavailableCapacity: Optional[float] = Field(default=None, examples=[361])
    eventStatus: Optional[str] = Field(default=None, examples=["Inactive"])
    eventStartTime: Optional[datetime] = Field(default=None, examples=["2022-08-23T06:59:00Z"])
    eventEndTime: Optional[datetime] = Field(default=None, examples=["2022-08-25T05:20:30Z"])
    durationUncertainty: Optional[str] = Field(default=None, examples=["+- 1 day"])
    cause: Optional[str] = Field(default=None, examples=["Other"])
    relatedInformation: Optional[str] = Field(default=None, examples=["Status changed to Completed"])
    outageProfile: Optional[List[OutageProfileData]] = Field(default=None, examples=[[{'startTime': '2023-02-03T21:06:31.000Z', 'endTime': '2023-02-03T21:10:00.000Z', 'capacity': 436}]])


class RemitMessageIdentifierWithUrl(BaseModel):
    model_config = ConfigDict(extra='allow')

    id: Optional[int] = Field(default=None, examples=[24])
    mrid: Optional[str] = Field(default=None, examples=["11XINNOGY------2-NGET-RMT-00084421"])
    revisionNumber: Optional[int] = Field(default=None, examples=[2])
    createdTime: Optional[datetime] = Field(default=None, examples=["2023-01-31T17:39:15Z"])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-01-31T17:15:31Z"])
    url: Optional[str] = Field(default=None, examples=["https://data.elexon.co.uk/bmrs/api/v1/remit/24"])


class RemitMessageWithId(BaseModel):
    model_config = ConfigDict(extra='allow')

    dataset: Optional[str] = Field(default=None, examples=["REMIT"])
    mrid: Optional[str] = Field(default=None, examples=["11XINNOGY------2-NGET-RMT-00084421"])
    revisionNumber: Optional[int] = Field(default=None, examples=[25])
    publishTime: Optional[datetime] = Field(default=None, examples=["2023-01-31T17:39:15Z"])
    createdTime: Optional[datetime] = Field(default=None, examples=["2023-01-31T17:39:15Z"])
    messageType: Optional[str] = Field(default=None, examples=["UnavailabilitiesOfElectricityFacilities"])
    messageHeading: Optional[str] = Field(default=None, examples=["Planned Unavailability of Generation Unit"])
    eventType: Optional[str] = Field(default=None, examples=["Production unavailability"])
    unavailabilityType: Optional[str] = Field(default=None, examples=["Planned"])
    participantId: Optional[str] = Field(default=None, examples=["11XINNOGY------2"])
    registrationCode: Optional[str] = Field(default=None, examples=["11XINNOGY------2"])
    assetId: Optional[str] = Field(default=None, examples=["T_DIDCB5"])
    assetType: Optional[str] = Field(default=None, examples=["Production"])
    affectedUnit: Optional[str] = Field(default=None, examples=["DIDCB5"])
    affectedUnitEIC: Optional[str] = Field(default=None, examples=["48W000000DIDCB5C"])
    affectedArea: Optional[str] = Field(default=None, examples=["N"])
    biddingZone: Optional[str] = Field(default=None, examples=["10YGB----------A"])
    fuelType: Optional[str] = Field(default=None, examples=["Fossil Gas"])
    normalCapacity: Optional[float] = Field(default=None, examples=[780])
    availableCapacity: Optional[float] = Field(default=None, examples=[320])
    unavailableCapacity: Optional[float] = Field(default=None, examples=[361])
    eventStatus: Optional[str] = Field(default=None, examples=["Inactive"])
    eventStartTime: Optional[datetime] = Field(default=None, examples=["2022-08-23T06:59:00Z"])
    eventEndTime: Optional[datetime] = Field(default=None, examples=["2022-08-25T05:20:30Z"])
    durationUncertainty: Optional[str] = Field(default=None, examples=["+- 1 day"])
    cause: Optional[str] = Field(default=None, examples=["Other"])
    relatedInformation: Optional[str] = Field(default=None, examples=["Status changed to Completed"])
    outageProfile: Optional[List[OutageProfileData]] = Field(default=None, examples=[[{'startTime': '2023-02-03T21:06:31.000Z', 'endTime': '2023-02-03T21:10:00.000Z', 'capacity': 436}]])
    id: Optional[int] = Field(default=None, examples=[1])


class WeekAheadTotalLoadPerBiddingZone(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = Field(default=None, examples=["2023-07-12 05:00:00Z"])
    forecastDate: Optional[date] = Field(default=None, examples=["2023-07-24"])
    forecastWeek: Optional[int] = Field(default=None, examples=[30])
    minimumPossible: Optional[float] = Field(default=None, examples=[18034])
    maximumAvailable: Optional[float] = Field(default=None, examples=[35011])


class DayAheadDemandForecastRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    boundary: Optional[str] = None
    transmissionSystemDemand: Optional[int] = None
    nationalDemand: Optional[int] = None


class WindGenerationForecastRow(BaseModel):
    model_config = ConfigDict(extra='allow')

    publishTime: Optional[datetime] = None
    startTime: Optional[datetime] = None
    settlementDate: Optional[date] = None
    settlementPeriod: Optional[int] = None
    generation: Optional[int] = None
